#!/bin/bash
#
# A simple alarm if an application crashed on the system by oom-killer
#
# Usage: check_oom_killer [path to log messages] [time in minute, how deep to check log]
# Example
# ./check_oom_killer /var/log/messages 30
# example output: check_oom_killer.fail::mins==30__demons==mysql || count=1
#
# Copyleft TolkIT (team@tolkit.top)
# author Sergey Egorushkin (SeroEgor@Gmail.com)

LOG=$1                                              # path to log
MIN=$2                                              # how deep check in minutes log
LOG=${LOG:="/var/log/syslog"}                       # default log path
MIN=${MIN:=30}                                      # default value in minutes

if [ "$( < /etc/os-release grep -w "ID" | grep -c "centos")" -eq 1 ]; then
  LOG="/var/log/messages"
  os="Centos"
else
  os="Other"
fi

if [ ! -f "$LOG" ]; then
  echo "check_oom_killer.path_error::path==${LOG} || count=0"
  exit 2
fi 
(( period = MIN * 60 ))                             # how deep check log in seconds
year=$(date +%Y)                                    # current year (in log year not indicated)
sec_year=$(date +%j*86400+%H*3600+%M*60+%S | bc -l) # seconds from begin year
if [ "$sec_year" -le "$period" ]; then              # if check period larger value in seconds from begin year
  (( year = year - 1 ))
fi

fail=$(tac "$LOG" | grep "Out of memory" | awk -v y="$year" -v p="$period" -v os="$os" ' 
  BEGIN{
    m["Jan"]=1; m["Feb"]=2; m["Mar"]=3; m["Apr"]=4;  m["May"]=5;  m["Jun"]=6
    m["Jul"]=7; m["Aug"]=8; m["Sep"]=9; m["Oct"]=10; m["Nov"]=11; m["Dec"]=12
    s=systime()                                     # get current time in seconds from begin EPOCH
  }
  {
    split($3, r, ":")                               # split hours, minutes and seconds
    ds=sprintf("%d %d %d %d %d %d", y, m[$1], $2, r[1], r[2], r[3]) # solve full date and time
    ts=mktime(ds)                                   # convert solved date and time in seconds from begin EPOCH
    if ( s-ts < p ) {                               # if difference current time and parse time in log less with period check
      if ( os == "Centos" ) {
        printf "%s, ", $12                          # print fail daemon
      }
      if (os == "Other") {
        printf "%s, ", $13
      }
    } else exit                                     # else complite search
  }')                                               # return list fails daemons

if [ -z "$fail" ]; then                             # if list zero, then return ok
  echo "check_oom_killer.ok::mins==${MIN} || count=0"
else                                                # else return fail state
  count=$(echo "$fail" | tr -cd ',' | wc -c)        # count failed daemons
  fail=$(echo "$fail" | tr -d "()" | sed 's/..$//') # remove "()" and last 2 chars
  echo "check_oom_killer.critical::mins==${MIN}__demons==${fail} || count=${count}"
  exit 2
fi
exit 0