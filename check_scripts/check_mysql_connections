#!/bin/bash

function usage {
    echo "$(basename $0) usage: "
    echo "    -w warning_level Example: 80"
    echo "    -c critical_level Example: 90"
    echo "    -u username Example: root"
    echo "    -p password Example: 1234"
    echo "    -h host Example: localhost"
    echo "    --defaults-file <FILE_PATH> "
    echo ""
    exit 1
}

HOST=${HOST:='localhost'}
USER=${USER:='bx_clusteruser'}
PASS=${PASS:=''}

while [[ $# -gt 1 ]]
do
    key="$1"
    case $key in
        -w)
            WARN="$2"
            shift
            ;;
        -c)
            CRIT="$2"
            shift
            ;;
        -u)
            USER="$2"
            shift
            ;;
        -p)
            PASS="$2"
            shift
            ;;
        -h)
            HOST="$2"
            shift
            ;;
        --defaults-file)
            FILE="$2"
            shift
            ;;
        *)
            usage
            shift
            ;;
    esac
    shift
done

[ -n "${WARN}" ] && [ -n "${CRIT}" ] || usage
if [ -n "${FILE}" ]; then
    CONN=$(echo "show processlist;" | mysql --defaults-file="${FILE}" 2> /dev/null | sed 1,1d  | wc -l)
else
    list=$(mysql -h ${HOST} -u ${USER} -p${PASS} -e "SELECT ID,USER,HOST,COMMAND,TIME FROM INFORMATION_SCHEMA.PROCESSLIST ORDER by time DESC" 2>&1 | grep -v "Using a password" | tail -n +2)
    CONN=$(echo "$list" | wc -l)
    MAX_CONN=$(mysql -h ${HOST} -u ${USER} -p${PASS} -e "show variables like 'max_connections';" 2>&1 | grep -v "Using a password" | tail -n +2 | awk '{print $2}')
    SLEEPALL=$(echo "$list" | awk '$2 == "${USER}" && $4 == "Sleep" {print $4}' | wc -l)
    SLEEP_60=$(echo "$list" | awk '$5 >= 60 && $2 == "${USER}" && $4 == "Sleep" {printf "%10s\n", $1}' | wc -l)
fi
output="connections==${CONN}"
perfdata="connections=${CONN};;;;${MAX_CONN} sleepall=${SLEEPALL};;;; sleep60=${SLEEP_60};;;;"
if [[ ${CONN} -gt ${CRIT} ]]; then
    echo "check_mysql_connections_critical::${output} | ${perfdata}"
    exit 2
elif [[ ${CONN} -gt ${WARN} ]]; then
    echo "check_mysql_connections_warning::${output} | ${perfdata}"
    exit 1
else
    echo "check_mysql_connections_ok::${output} | ${perfdata}"
    exit 0
fi
